xquery version "3.0";

module namespace app="http://localhost/apps/Kalendar/templates";
declare namespace tei="http://www.tei-c.org/ns/1.0";
declare option exist:serialize "method=xml media-type=text/html omit-xml-declaration=no indent=yes";
import module namespace kwic="http://exist-db.org/xquery/kwic";
import module namespace templates="http://exist-db.org/xquery/templates" ;
import module namespace config="http://localhost/apps/Kalendar/config" at "config.xqm";

(:~
: This is a sample templating function. It will be called by the templating module if
: it encounters an HTML element with a class attribute: class="app:test". The function
: has to take exactly 3 parameters.
:
: @param $node the HTML node with the class attribute which triggered this call
: @param $model a map containing arbitrary data - used to pass information between template calls
:)
declare function app:test($node as node(), $model as map(*)) {
<p>Dummy template output generated by function app:test at {current-dateTime()}. The templating
function was triggered by the class attribute <code>class="app:test"</code>.</p>
};


declare function app:aprildemo($node as node(), $model as map(*)) {

let $rows := doc('/db/apps/Kalendar/data/otherapril/April2.xml')//tei:row

for $row in $rows
    return <tr>{
        let $cells := $row/*
        for $cell in $cells
        return
            <td>{$cell}</td>
    }</tr>
};

declare function app:newaprildemo($node as node(), $model as map(*)) {

let $rows := doc('/db/apps/Kalendar/data/april/NewApril.xml')//tei:row

for $row in $rows
    return <tr>{
        let $cells := $row/*
        for $cell in $cells
        return
            <td>{$cell}</td>
    }</tr>
};

declare function app:newaprillinks($node as node(), $model as map(*)) {

let $links := doc('/db/apps/Kalendar/data/NewApril.xml')//tei:row//tei:cell//tei:ref/@target

for $link in $links
    return 
        <td><a href="{$link}">Link</a><br /></td>
    
};

declare function app:mayonedemo($node as node(), $model as map(*), $name as xs:string?) {

let $rows := doc('/db/apps/Kalendar/data/May1.xml')//tei:row

for $row in $rows
    return <tr>{
        let $cells := $row/*
        for $cell in $cells
        return
            <td>{$cell}</td>
    }</tr>
};

declare function app:maytwodemo($node as node(), $model as map(*), $name as xs:string?) {

let $rows := doc('/db/apps/Kalendar/data/May2.xml')//tei:row

for $row in $rows
    return <tr>{
        let $cells := $row/*
        for $cell in $cells
        return
            <td>{$cell}</td>
    }</tr>
};

declare function app:junedemo($node as node(), $model as map(*), $name as xs:string?) {

let $rows := doc('/db/apps/Kalendar/data/june.xml')//tei:row

for $row in $rows
    return <tr>{
        let $cells := $row/*
        for $cell in $cells
        return
            <td>{$cell}</td>
    }</tr>
};

declare function app:june2demo($node as node(), $model as map(*), $name as xs:string?) {

let $rows := doc('/db/apps/Kalendar/data/june2.xml')//tei:row

for $row in $rows
    return <tr>{
        let $cells := $row/*
        for $cell in $cells
        return
            <td>{$cell}</td>
    }</tr>
};

declare function app:june3demo($node as node(), $model as map(*), $name as xs:string?) {

let $rows := doc('/db/apps/Kalendar/data/june3.xml')//tei:row

for $row in $rows
    return <tr>{
        let $cells := $row/*
        for $cell in $cells
        return
            <td>{$cell}</td>
    }</tr>
};


declare function app:june4demo($node as node(), $model as map(*), $name as xs:string?) {

let $rows := doc('/db/apps/Kalendar/data/june4.xml')//tei:row

for $row in $rows
    return <tr>{
        let $cells := $row/*
        for $cell in $cells
        return
            <td>{$cell}</td>
    }</tr>
};

declare function app:oct1demo($node as node(), $model as map(*), $name as xs:string?) {

let $rows := doc('/db/apps/Kalendar/data/Oct1.xml')//tei:row

for $row in $rows
    return <tr>{
        let $cells := $row/*
        for $cell in $cells
        return
            <td>{$cell}</td>
    }</tr>
};

declare function app:alldecember($node as node(), $model as map(*)) {

let $rows := doc('/db/apps/Kalendar/data/AllDecember.xml')//tei:row

for $row in $rows
    return <tr>{
        let $cells := $row/*
        for $cell in $cells
        return
            <td>{$cell}</td>
    }</tr>
};

(:  declare function app:junelinks($node as node(), $model as map(*), $name as xs:string?) {

let $links := doc('/db/apps/Kalendar/data/june.xml')//tei:row//tei:cell//tei:link/@target

for $link in $links
    return 
        <td><a href="{$link}">Link</a><br /></td>
    
};
:)